import os
import sys
import traceback

class CGenerator:
	def __init__(self, outputfile, concrete_file, summary_file, fakelib=None):

		self.summary_file = summary_file
		self.concrete_file = concrete_file

		self.outputfile = outputfile
		self.tmp_files = []

		self.tmp_concrete = self.add_fake_include(concrete_file)
		self.tmp_summary = self.add_fake_include(summary_file)

	def add_fake_include(self, file):
		fake_include = '#include <stdlib.h>\n'

		if not file:
			return None

		try:
			c = open(file, "r")
			c_lines = c.readlines()
			c.close()

			tmp_file = 'tmp_' + file.split('/')[-1]
		
			tmp_c = open(tmp_file, "w")
			tmp_c.writelines([fake_include] + c_lines)
			tmp_c.flush()
			tmp_c.close()

			self.tmp_files.append(tmp_file)
			return tmp_file

		except Exception:
			print(traceback.format_exc())
			self._exit(f'{file} not found')
	
	def remove_files(self, *files):
		for f in files:
			if f and os.path.exists(f):
				os.remove(f)


	def write_to_file(self, code, header, generator='\'summvalgen\''):

		header = [f'/*File generated by {generator}*/\n\n'] + header
		header.append('\n')
		header.append('\n')

		outfile = open(self.outputfile, "w")
		outfile.writelines(header)
		outfile.write(code)
		outfile.flush()
		outfile.close()

	def exit(self, msg):
		try:
			self.remove_files(*self.tmp_files)
		except Exception:
				pass

		sys.exit(msg)